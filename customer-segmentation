-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------USER SEGMENTATION ANALYSIS - MICHAEL NAGEL -----------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------


--METHODOLOGY: 
-- A) IDENTIFY PERCENTILE CUTOFFS 
-- B) DESCRIBE SEGMENTS & IDENTIFY HIGH-AFFINITY SEGMENT



-----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------- A) IDENTIFY PERCENTILE CUTOFFS  ---------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- Identify percentiles cutoffs for order size and frequency to group into four groups by exploring distribution of basket size and frequency. 
-- The objective is to cut the universe into four groups: high-frequency/big-ticket, high-frequency/small-ticket, low-frequency/big-ticket and low-frequency/low-ticket
-- distribution skew will define the right cutoff points 

WITH ordersize_by_user AS 
   ( SELECT 
              user_id
            , avg(basket) as average_order_size
    FROM `bi-2019-test.ad_hoc.orders_jan2021`
    GROUP BY 1 ORDER BY 2
   )
SELECT
        max(average_order_size) as max
      , approx_quantiles(average_order_size, 100 IGNORE NULLS )  [OFFSET(90)]  AS percentile_90
      , approx_quantiles(average_order_size, 100 IGNORE NULLS )  [OFFSET(66)] AS percentile_66
      , avg(average_order_size) as avg 
      , approx_quantiles(average_order_size, 100 IGNORE NULLS )  [OFFSET(50)] AS med        
      , approx_quantiles(average_order_size, 100 IGNORE NULLS )  [OFFSET(33)]  AS percentile_33
      , approx_quantiles(average_order_size, 100 IGNORE NULLS )  [OFFSET(10)] AS percentile_10
      , min(average_order_size) as min
FROM ordersize_by_user

/*
RESULT:
   max	percentile_90	percentile_66 avg med	percentile_33	percentile_10	min	
	134.5    17.4.           10.5   9.74  8.1    6.24            3.9     0.0
 relatively even distribution with slight skew to the right - will take 66th percentile as cutoff
*/

;
WITH freq_by_user AS 
   ( SELECT 
              user_id
            , count(distinct order_id) as frequency
    FROM `bi-2019-test.ad_hoc.orders_jan2021`
    GROUP BY 1 ORDER BY 2
   )
SELECT
        max(frequency ) as max
      , approx_quantiles(frequency, 100 IGNORE NULLS )  [OFFSET(90)]  AS percentile_90
      , approx_quantiles(frequency, 100 IGNORE NULLS )  [OFFSET(66)] AS percentile_66
      , avg(frequency) as avg 
      , approx_quantiles(frequency, 100 IGNORE NULLS )  [OFFSET(50)] AS med        
      , approx_quantiles(frequency, 100 IGNORE NULLS )  [OFFSET(33)]  AS percentile_33
      , approx_quantiles(frequency, 100 IGNORE NULLS )  [OFFSET(10)] AS percentile_10
      , min(frequency) as min
FROM freq_by_user

/*
RESULT
max	percentile_90	percentile_66	avg	med	percentile_33	percentile_10	min	
33      5            2         2.45 2         1          1         1

Strong right skew - will use percentile 90 as cutoff 
*/

--Note: with create table access the segment cutoffs points could be coded so that they change dynamically instead of being hard-coded in following steps
;
-----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------- B) DESCRIBE SEGMENTS  & IDENTIFY HIGH-PROPENSITY SEGMENT --------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

-- describe segments: how many users, total number of orders, total revenue, percentage of revenue in breakfast category
-- hypothesis: high-frequency/small-ticket group would have highest affinity to breakfast category
-- this code could be shortened by building a reference table with create table access 

WITH ordersize_by_user AS 
  ( SELECT 
              user_id
            , avg(basket) as average_order_size
    FROM `bi-2019-test.ad_hoc.orders_jan2021`
    GROUP BY 1 ORDER BY 2
  )
, freq_by_user AS 
  ( SELECT 
              user_id
            , count(distinct order_id) as frequency
    FROM `bi-2019-test.ad_hoc.orders_jan2021`
    GROUP BY 1 ORDER BY 2
  )
, cutoff_ordersize AS
  (  SELECT
              approx_quantiles(average_order_size, 100 IGNORE NULLS )  [OFFSET(66)] AS cutoff_order_size_avg   
     FROM ordersize_by_user
  )
, cutoff_freq AS
  (  SELECT
              approx_quantiles(frequency, 100 IGNORE NULLS )  [OFFSET(90)] AS cutoff_freq_avg   
     FROM freq_by_user
  )  
, segment_def AS 
  ( SELECT 
              a.user_id
            , CASE 
                  WHEN average_order_size >= (select cutoff_order_size_avg FROM cutoff_ordersize ) 
                      AND frequency >= (select cutoff_freq_avg FROM cutoff_freq ) THEN 'big-ticket/high-frequency'
                  WHEN average_order_size < (select cutoff_order_size_avg FROM cutoff_ordersize )  
                      AND frequency >= (select cutoff_freq_avg FROM cutoff_freq ) THEN 'small-ticket/high-frequency'
                  WHEN average_order_size >= (select cutoff_order_size_avg FROM cutoff_ordersize ) 
                      AND frequency < (select cutoff_freq_avg FROM cutoff_freq ) THEN 'big-ticket/low-frequency'
                  ELSE 'small-ticket/low-frequency' 
              END segment
    FROM ordersize_by_user a 
    INNER JOIN freq_by_user b 
          ON a.user_id = b.user_id
   )
, seg_rev_bkfast AS 
  (  SELECT 
              b.segment
            , sum(a.basket) as rev_bkfast
    FROM `bi-2019-test.ad_hoc.orders_jan2021` a
      INNER JOIN segment_def b
        ON a.user_id = b.user_id
    WHERE a.cuisine_parent ='Breakfast'
    GROUP BY 1 
  )
SELECT 
 --   a.user_id --would group by user id if the environment let me download more lines - as it is need to group at higher level before exporting
    e.segment
  , count (DISTINCT a.user_id) as total_users  
  , avg(d.frequency) as average_frequency
  , avg(c.average_order_size) as average_spend_per_customer
  , sum(a.basket) as total_revenue
  , min(b.rev_bkfast)/sum(a.basket) as pct_breakfast
FROM `bi-2019-test.ad_hoc.orders_jan2021` a
  INNER JOIN ordersize_by_user c
          ON a.user_id = c.user_id
  INNER JOIN freq_by_user d
          ON a.user_id = d.user_id
  INNER JOIN segment_def e 
          ON e.user_id = a.user_id
  INNER JOIN seg_rev_bkfast b
          ON e.segment = b.segment
GROUP BY 1 ORDER BY 6 DESC
;


--Hypothesis confirmed (highest % breakfast in small-ticket/high-frequency). Exporting output for visualization

